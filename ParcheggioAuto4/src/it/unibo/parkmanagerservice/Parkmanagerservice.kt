/* Generated by AN DISI Unibo */ 
package it.unibo.parkmanagerservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkmanagerservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "moveToHome"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var POSTILIBERI = 6
				var robotLibero = true
				var outdoorLibera = true
				var indoorLibera = true	
				var PROGRESSIVO = 0	
				var STATO = "IDLE"
				var listaToken = ArrayList<String>()
				var file = java.io.File("log.txt")
				lateinit var outSonarActor : ActorBasic
				
				
				val mapname     = "mappaParcheggio"  		 
				var Myself      = myself   
				var CurrentPlannedMove = "" 
				var RobotType     = "" 
				var matriceParcheggi = arrayOf(intArrayOf(0,0),intArrayOf(0,0),intArrayOf(0,0))
				
				suspend fun vaiA( i: String, j : String){
					
					itunibo.planner.plannerUtil.planForGoal(i,j)
		  		 	CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove() 
		
		  		 	while(CurrentPlannedMove.length>0){
		  		 		println("MOSSa $CurrentPlannedMove")
		  		 		itunibo.planner.plannerUtil.updateMap("$CurrentPlannedMove")
		  		 
		  		 		if (CurrentPlannedMove.equals("w") || CurrentPlannedMove.equals("s") ){
		  		 			unibo.robot.robotSupport.move("$CurrentPlannedMove")
		  		 			delay (400)
		  		 			unibo.robot.robotSupport.move("h")
		  		 		} else {
		  		 			unibo.robot.robotSupport.move("$CurrentPlannedMove")
		  		 		}
		  		 	
		  		 		CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove()
		  		 	}
		  		 	file.appendText(itunibo.planner.plannerUtil.get_curPos().toString())
		  		 	file.appendText("\n")
		
				}
		return { //this:ActionBasciFsm
				state("moveToHome") { //this:State
					action { //it:State
						
									var writer = java.io.PrintWriter("log.txt")
									writer.append("")
									writer.close()
									outSonarActor     = sysUtil.getActor("outsonar")!!
						unibo.robot.robotSupport.create(myself ,"basicrobotConfig.json" )
						 RobotType = unibo.robot.robotSupport.robotKind  
						updateResourceRep( "basicrobot(start)"  
						)
						itunibo.planner.plannerUtil.initAI(  )
						println("&&&  trolley loads the parking map from the given file ...")
						itunibo.planner.plannerUtil.loadRoomMap( "$mapname"  )
						itunibo.planner.plannerUtil.showMap(  )
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						pathexecutil.register( Myself  )
						forward("goto", "goto(home)" ,"parkmanagerservice" ) 
					}
					 transition(edgeName="t09",targetState="acceptin",cond=whenEvent("acceptin"))
					transition(edgeName="t010",targetState="goto",cond=whenDispatch("goto"))
					transition(edgeName="t011",targetState="acceptout",cond=whenRequest("acceptout"))
					transition(edgeName="t012",targetState="uscitalibera",cond=whenEvent("uscitalibera"))
					transition(edgeName="t013",targetState="timeout",cond=whenEvent("timeout"))
					transition(edgeName="t014",targetState="stopped",cond=whenEvent("stop"))
				}	 
				state("stopped") { //this:State
					action { //it:State
						if(  STATO.equals("IDLE") || STATO.equals("WORKING")  
						 ){ STATO = "STOP"  
						forward("cambiostato", "cambiostato($STATO)" ,"managerservice" ) 
						}
						println("IL ROBOT è STATO FERMATO")
					}
					 transition(edgeName="t015",targetState="start",cond=whenEvent("start"))
				}	 
				state("start") { //this:State
					action { //it:State
						if(  STATO.equals("STOP")  
						 ){ STATO = "IDLE"  
						forward("cambiostato", "cambiostato($STATO)" ,"managerservice" ) 
						}
						println("RIPARTO")
					}
					 transition(edgeName="t016",targetState="acceptin",cond=whenEvent("acceptin"))
					transition(edgeName="t017",targetState="goto",cond=whenDispatch("goto"))
					transition(edgeName="t018",targetState="informin",cond=whenDispatch("informin"))
					transition(edgeName="t019",targetState="movetoin",cond=whenRequest("carenter"))
					transition(edgeName="t020",targetState="acceptout",cond=whenRequest("acceptout"))
					transition(edgeName="t021",targetState="uscitalibera",cond=whenEvent("uscitalibera"))
					transition(edgeName="t022",targetState="timeout",cond=whenEvent("timeout"))
					transition(edgeName="t023",targetState="movetoslotout",cond=whenDispatch("movetoslotout"))
					transition(edgeName="t024",targetState="movetoout",cond=whenDispatch("movetoout"))
					transition(edgeName="t025",targetState="findslot",cond=whenDispatch("findslot"))
				}	 
				state("acceptin") { //this:State
					action { //it:State
						if(  indoorLibera  
						 ){println("Vado in informin")
						forward("informin", "informin" ,"parkmanagerservice" ) 
						}
						else
						 {emit("acceptin", "acceptin" ) 
						 }
					}
					 transition(edgeName="t026",targetState="stopped",cond=whenEvent("stop"))
					transition(edgeName="t027",targetState="informin",cond=whenDispatch("informin"))
					transition(edgeName="t028",targetState="acceptin",cond=whenEvent("acceptin"))
					transition(edgeName="t029",targetState="uscitalibera",cond=whenEvent("uscitalibera"))
					transition(edgeName="t030",targetState="timeout",cond=whenEvent("timeout"))
				}	 
				state("informin") { //this:State
					action { //it:State
						forward("slotsnum", "slotsnum($POSTILIBERI)" ,"cliente" ) 
					}
					 transition(edgeName="t031",targetState="stopped",cond=whenEvent("stop"))
					transition(edgeName="t032",targetState="movetoin",cond=whenRequest("carenter"))
					transition(edgeName="t033",targetState="uscitalibera",cond=whenEvent("uscitalibera"))
					transition(edgeName="t034",targetState="timeout",cond=whenEvent("timeout"))
					transition(edgeName="t035",targetState="acceptout",cond=whenRequest("acceptout"))
				}	 
				state("movetoin") { //this:State
					action { //it:State
						 robotLibero=false 
									indoorLibera=false	
									POSTILIBERI --
						updateResourceRep( "POSTILIBERI"  
						)
						if(  STATO.equals("IDLE") || STATO.equals("STOP")  
						 ){ STATO = "WORKING"  
						forward("cambiostato", "cambiostato($STATO)" ,"managerservice" ) 
						}
						println("Robot move to in")
						 file.appendText("INDOOR\n")  
						vaiA( "5", "0"  )
						println("Robot AT INDOOR")
					}
					 transition( edgeName="goto",targetState="receipt", cond=doswitch() )
				}	 
				state("receipt") { //this:State
					action { //it:State
						
									var RICEVUTA = "H"
									var stop= false
									for (i in 0..2) {
										for (j in 0..1) {
											if (matriceParcheggi[i][j] == 0 && !stop) {
												RICEVUTA = RICEVUTA.plus("$i")
												RICEVUTA = RICEVUTA.plus("$j")
												matriceParcheggi[i][j] = 1
												stop=true
											}
										}
									} 
									RICEVUTA = RICEVUTA.plus("$PROGRESSIVO")
									listaToken.add(RICEVUTA)
									//RICEVUTA += PROGRESSIVO
									//RICEVUTA += "h"
									println("\t\t RICEVUTA $RICEVUTA")
						updateResourceRep("$RICEVUTA" 
						)
						answer("carenter", "receipt", "receipt($RICEVUTA)"   )  
						forward("goto", "goto($RICEVUTA)" ,"parkmanagerservice" ) 
						forward("parcheggioOccupato", "parcheggioOccupato($RICEVUTA)" ,"managerservice" ) 
						 PROGRESSIVO++  
						updateResourceRep( "$PROGRESSIVO"  
						)
					}
					 transition(edgeName="t036",targetState="stopped",cond=whenEvent("stop"))
					transition(edgeName="t037",targetState="goto",cond=whenDispatch("goto"))
				}	 
				state("goto") { //this:State
					action { //it:State
						 robotLibero=false  
						if( checkMsgContent( Term.createTerm("goto(V)"), Term.createTerm("goto(ST)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var ST = payloadArg(0) 
												println(ST)
								if(  ST.equals("home")  
								 ){if(  STATO.equals("IDLE") || STATO.equals("STOP")  
								 ){ STATO = "WORKING"  
								forward("cambiostato", "cambiostato($STATO)" ,"managerservice" ) 
								}
								println("Ric. gotohome")
								 file.appendText("HOME\n")  
								vaiA( "0", "0"  )
								println("ROBOT at HOME")
								if(  STATO.equals("WORKING") || STATO.equals("STOP")  
								 ){ STATO = "IDLE"  
								forward("cambiostato", "cambiostato($STATO)" ,"managerservice" ) 
								}
								 robotLibero=true  
								}
								else
								 {
								 					println("RICEVO $ST")
								 					var I = ST[1].toString().toInt()
								 					var J = ST[2].toString().toInt()
								 					if(J>0){
								 						J = J+2
								 					}
								 					I = I+1
								 					J = J+1
								 					println("$I, $J")
								 if(  STATO.equals("IDLE") || STATO.equals("STOP")  
								  ){ STATO = "WORKING"  
								 forward("cambiostato", "cambiostato($STATO)" ,"managerservice" ) 
								 }
								  file.appendText("SLOT $J $I\n")  
								 vaiA( "$J", "$I"  )
								  var POS = payloadArg(0)  
								 println("ROBOT $ST move to $POS")
								  indoorLibera=true  
								 forward("goto", "goto(home)" ,"parkmanagerservice" ) 
								 }
						}
					}
					 transition(edgeName="t038",targetState="stopped",cond=whenEvent("stop"))
					transition(edgeName="t039",targetState="goto",cond=whenDispatch("goto"))
					transition(edgeName="t040",targetState="movetoin",cond=whenRequest("carenter"))
					transition(edgeName="t041",targetState="acceptin",cond=whenEvent("acceptin"))
					transition(edgeName="t042",targetState="acceptout",cond=whenRequest("acceptout"))
					transition(edgeName="t043",targetState="uscitalibera",cond=whenEvent("uscitalibera"))
					transition(edgeName="t044",targetState="timeout",cond=whenEvent("timeout"))
				}	 
				state("movetoslotout") { //this:State
					action { //it:State
						 robotLibero=false  
						if( checkMsgContent( Term.createTerm("movetoslotout(V)"), Term.createTerm("movetoslotout(POS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var POS = payloadArg(0) 
												var I = POS[1].toString().toInt()
												var J = POS[2].toString().toInt()
												if(J>0){
													J = J+2
												}
												I = I+1
												J = J+1	
								println("ROBOT move to $POS")
								if(  STATO.equals("IDLE") || STATO.equals("STOP")  
								 ){ STATO = "WORKING"  
								forward("cambiostato", "cambiostato($STATO)" ,"managerservice" ) 
								}
								 file.appendText("SLOT $J $I\n")  
								vaiA( "$J", "$I"  )
								forward("movetoout", "movetoout" ,"parkmanagerservice" ) 
						}
					}
					 transition(edgeName="t045",targetState="stopped",cond=whenEvent("stop"))
					transition(edgeName="t046",targetState="movetoout",cond=whenDispatch("movetoout"))
				}	 
				state("movetoout") { //this:State
					action { //it:State
						println("movetoout")
						 outdoorLibera = false  
						if(  STATO.equals("IDLE") || STATO.equals("STOP")  
						 ){ STATO = "WORKING"  
						forward("cambiostato", "cambiostato($STATO)" ,"managerservice" ) 
						}
						 file.appendText("OUTDOOR\n")  
						vaiA( "5", "4"  )
						forward("goto", "goto(home)" ,"parkmanagerservice" ) 
						emit("arrivoauto", "arrivoauto" ) 
					}
					 transition(edgeName="t047",targetState="stopped",cond=whenEvent("stop"))
					transition(edgeName="t048",targetState="movetoin",cond=whenRequest("carenter"))
					transition(edgeName="t049",targetState="goto",cond=whenDispatch("goto"))
					transition(edgeName="t050",targetState="timeout",cond=whenEvent("timeout"))
				}	 
				state("acceptout") { //this:State
					action { //it:State
						println("acceptout")
						if(  outdoorLibera  
						 ){if( checkMsgContent( Term.createTerm("acceptout(V)"), Term.createTerm("acceptout(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var T = payloadArg(0)  
								if(  listaToken.contains(T)  
								 ){   
													POSTILIBERI ++
													matriceParcheggi[T[1].toString().toInt()][T[2].toString().toInt()] = 0
								updateResourceRep( "POSTILIBERI"  
								)
								forward("findslot", "findslot($T)" ,"parkmanagerservice" ) 
								forward("parcheggioLibero", "parcheggioLibero($T)" ,"managerservice" ) 
								println("Slot $T")
								}
								else
								 {forward("goto", "goto(home)" ,"parkmanagerservice" ) 
								 }
						}
						answer("acceptout", "response", "response(true)"   )  
						}
						else
						 {answer("acceptout", "response", "response(false)"   )  
						 }
					}
					 transition(edgeName="t051",targetState="stopped",cond=whenEvent("stop"))
					transition(edgeName="t052",targetState="findslot",cond=whenDispatch("findslot"))
					transition(edgeName="t053",targetState="uscitalibera",cond=whenEvent("uscitalibera"))
					transition(edgeName="t054",targetState="acceptout",cond=whenRequest("acceptout"))
					transition(edgeName="t055",targetState="goto",cond=whenDispatch("goto"))
				}	 
				state("findslot") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("findslot(V)"), Term.createTerm("findslot(TOKEN)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var TOKEN = payloadArg(0)  
								println("findslot")
								forward("movetoslotout", "movetoslotout($TOKEN)" ,"parkmanagerservice" ) 
						}
					}
					 transition(edgeName="t056",targetState="stopped",cond=whenEvent("stop"))
					transition(edgeName="t057",targetState="movetoslotout",cond=whenDispatch("movetoslotout"))
				}	 
				state("uscitalibera") { //this:State
					action { //it:State
						 outdoorLibera = true  
						updateResourceRep( "$outdoorLibera"  
						)
						forward("uscitalibera1", "uscitalibera1(V)" ,"managerservice" ) 
					}
					 transition(edgeName="t058",targetState="stopped",cond=whenEvent("stop"))
					transition(edgeName="t059",targetState="acceptin",cond=whenEvent("acceptin"))
					transition(edgeName="t060",targetState="goto",cond=whenDispatch("goto"))
					transition(edgeName="t061",targetState="informin",cond=whenDispatch("informin"))
					transition(edgeName="t062",targetState="movetoin",cond=whenRequest("carenter"))
				}	 
				state("timeout") { //this:State
					action { //it:State
						println("ALARM")
						forward("timeout1", "timeout1(V)" ,"managerservice" ) 
					}
					 transition(edgeName="t063",targetState="stopped",cond=whenEvent("stop"))
					transition(edgeName="t064",targetState="acceptin",cond=whenEvent("acceptin"))
					transition(edgeName="t065",targetState="goto",cond=whenDispatch("goto"))
					transition(edgeName="t066",targetState="informin",cond=whenDispatch("informin"))
					transition(edgeName="t067",targetState="acceptin",cond=whenEvent("acceptin"))
					transition(edgeName="t068",targetState="movetoin",cond=whenRequest("carenter"))
				}	 
			}
		}
}
