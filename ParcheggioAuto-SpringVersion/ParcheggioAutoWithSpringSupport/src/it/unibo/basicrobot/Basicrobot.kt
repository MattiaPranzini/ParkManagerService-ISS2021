/* Generated by AN DISI Unibo */ 
package it.unibo.basicrobot

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Basicrobot ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var interfaccia :parcheggio.ParkServiceStatusGUI ?= null   
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						 
								 interfaccia = parcheggio.ParkServiceStatusGUI(context)  
					}
					 transition( edgeName="goto",targetState="s1", cond=doswitch() )
				}	 
				state("s1") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("temperatura(V)"), Term.createTerm("temperatura(TEMPERATURA)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  var T = payloadArg(0)  
								 interfaccia!!.temperatura(T)  
								updateResourceRep( "temp%$T"  
								)
								println("TEMP $T")
						}
						if( checkMsgContent( Term.createTerm("ventilatore(V)"), Term.createTerm("ventilatore(STATO)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  var V = payloadArg(0)  
								 interfaccia!!.ventilatore(V)  
								updateResourceRep( "fan%$V"  
								)
								println("VENT $V")
						}
						if( checkMsgContent( Term.createTerm("timeout1(V)"), Term.createTerm("timeout1(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 interfaccia!!.alarm(true)  
								updateResourceRep( "alarm%true"  
								)
								println("Alarm true")
						}
						if( checkMsgContent( Term.createTerm("uscitalibera1(V)"), Term.createTerm("uscitalibera1(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 interfaccia!!.alarm(false)  
								updateResourceRep( "alarm%false"  
								)
								println("Alarm false")
						}
						if( checkMsgContent( Term.createTerm("cambiostato(V)"), Term.createTerm("cambiostato(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var V = payloadArg(0)
												interfaccia!!.stato(V)  
								updateResourceRep( "stato%$V"  
								)
								println("Alarm false")
						}
						if( checkMsgContent( Term.createTerm("parcheggioOccupato(V)"), Term.createTerm("parcheggioOccupato(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var V = payloadArg(0)
												interfaccia!!.park(V[1].toString(), V[2].toString(), false)  
								updateResourceRep( "park%${V[1].toString()}%${V[2].toString()}%false"  
								)
								println("Parcheggio $V occupato")
						}
						if( checkMsgContent( Term.createTerm("parcheggioLibero(V)"), Term.createTerm("parcheggioLibero(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var V = payloadArg(0)
												interfaccia!!.park(V[1].toString(), V[2].toString(), true)  
								updateResourceRep( "park%${V[1].toString()}%${V[2].toString()}%true"  
								)
								println("Parcheggio $V liberato")
						}
					}
					 transition(edgeName="t02",targetState="s1",cond=whenDispatch("temperatura"))
					transition(edgeName="t03",targetState="s1",cond=whenDispatch("ventilatore"))
					transition(edgeName="t04",targetState="s1",cond=whenDispatch("timeout1"))
					transition(edgeName="t05",targetState="s1",cond=whenDispatch("uscitalibera1"))
					transition(edgeName="t06",targetState="s1",cond=whenDispatch("cambiostato"))
					transition(edgeName="t07",targetState="s1",cond=whenDispatch("parcheggioOccupato"))
					transition(edgeName="t08",targetState="s1",cond=whenDispatch("parcheggioLibero"))
				}	 
			}
		}
}
