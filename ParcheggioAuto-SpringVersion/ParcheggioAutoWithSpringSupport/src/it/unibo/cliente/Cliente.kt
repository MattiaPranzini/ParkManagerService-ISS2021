/* Generated by AN DISI Unibo */ 
package it.unibo.cliente

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Cliente ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var TOKENID=""
				var interfaccia :parcheggio.ParkServiceGUI ?= null  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						 
								 interfaccia = parcheggio.ParkServiceGUI(context)  
					}
					 transition(edgeName="t069",targetState="s1",cond=whenDispatch("slotsnum"))
					transition(edgeName="t070",targetState="s2",cond=whenReply("receipt"))
					transition(edgeName="t071",targetState="s3",cond=whenReply("response"))
				}	 
				state("s1") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("slotsnum(SN)"), Term.createTerm("slotsnum(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var S = payloadArg(0)  
								 interfaccia!!.postiLiberi(S)  
						}
					}
					 transition(edgeName="t072",targetState="s2",cond=whenReply("receipt"))
					transition(edgeName="t073",targetState="s3",cond=whenReply("response"))
					transition(edgeName="t074",targetState="s1",cond=whenDispatch("slotsnum"))
				}	 
				state("s2") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("receipt(TOKENID)"), Term.createTerm("receipt(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 TOKENID = payloadArg(0)  
								println("Client: TOKEN ricevuto $TOKENID")
								 interfaccia!!.receipt(TOKENID)  
						}
					}
					 transition(edgeName="t075",targetState="s3",cond=whenReply("response"))
					transition(edgeName="t076",targetState="s2",cond=whenReply("receipt"))
					transition(edgeName="t077",targetState="s1",cond=whenDispatch("slotsnum"))
				}	 
				state("s3") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("response(V)"), Term.createTerm("response(R)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var R = payloadArg(0).toBoolean()  
								println("Response: $R")
								if(  !R  
								 ){ interfaccia!!.messaggio("Outdoor occupata, attendere!")  
								request("acceptout", "acceptout($TOKENID)" ,"parkmanagerservice" )  
								}
								else
								 { interfaccia!!.messaggio("")  
								 }
						}
					}
					 transition(edgeName="t078",targetState="s3",cond=whenReply("response"))
					transition(edgeName="t079",targetState="s4",cond=whenEvent("arrivoauto"))
					transition(edgeName="t080",targetState="s2",cond=whenReply("receipt"))
					transition(edgeName="t081",targetState="s1",cond=whenDispatch("slotsnum"))
				}	 
				state("s4") { //this:State
					action { //it:State
						delay(20000) 
						emit("autospostata", "autospostata" ) 
						println("Invio evento autospostata")
					}
					 transition(edgeName="t082",targetState="s3",cond=whenReply("response"))
					transition(edgeName="t083",targetState="s4",cond=whenEvent("arrivoauto"))
					transition(edgeName="t084",targetState="s2",cond=whenReply("receipt"))
					transition(edgeName="t085",targetState="s1",cond=whenDispatch("slotsnum"))
				}	 
			}
		}
}
